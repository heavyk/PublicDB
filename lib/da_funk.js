// Generated by LiveScript 1.2.0
/*
# TODO: move this over to the MachineShop and then use this as a test
obj1 =
	lala:
		field1: "obj1.field1"
		field2: "obj1.field2"

obj2 =
	lala:
		field2: "obj2.field2"
		field3: "obj2.field3"

obj3 =
	lala:
		field3: "obj3.field3"

console.log "extended:", extend_deps obj1, obj2, obj3
*/
var _, console, regex_space, da_funkiest, da_funk, objectify, merge, extend, embody, out$ = typeof exports != 'undefined' && exports || this;
_ = require('lodash');
if (typeof console === 'undefined') {
  console = require('console');
}
regex_space = new RegExp(' ', 'g');
out$.da_funkiest = da_funkiest = function(obj){
  return da_funk(import$({}, obj), true);
};
out$.da_funk = da_funk = function(obj, go_deep){
  var i$, ref$, keys, len$, k, v, fn, i, ii, j, jj, args, body;
  for (i$ = 0, len$ = (ref$ = keys = Object.keys(obj)).length; i$ < len$; ++i$) {
    k = ref$[i$];
    v = obj[k];
    if (v === 8 && typeof (fn = obj[k + '.js']) === 'string') {
      i = fn.indexOf('(');
      ii = fn.indexOf(')');
      j = fn.indexOf('{');
      jj = fn.lastIndexOf('}');
      args = fn.substring(++i, ii).replace(regex_space, '');
      body = '"use strict"\n' + fn.substring(++j, jj).trim();
      obj[k] = new Function(args, body);
    } else if (_.isObject(v)) {
      if (go_deep) {
        obj[k] = da_funk(import$({}, obj[k]));
      } else {
        da_funk(obj[k]);
      }
    }
  }
  return obj;
};
out$.objectify = objectify = function(str){
  if (str[0] === '/' || str[0] === '.') {
    str = ToolShed.readFile(str);
  }
  if (typeof str === 'string') {
    str = JSON.parse(str);
  }
  return da_funk(str);
};
out$.merge = merge = function(a, b){
  var keys, r, i$, len$, k, v, c;
  keys = _.union(Object.keys(a), Object.keys(b));
  r = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    k = keys[i$];
    v = b[k];
    c = a[k];
    r[k] = _.isArray(c)
      ? _.isArray(v)
        ? _.union(v, c)
        : v ? c.concat(v) : c
      : _.isObject(v) && _.isObject(c)
        ? merge(c, v)
        : typeof c === 'undefined' ? v : c;
  }
  return r;
};
out$.extend = extend = function(a, b){
  var keys, i$, len$, k, v, c;
  keys = _.union(Object.keys(a), Object.keys(b));
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    k = keys[i$];
    v = b[k];
    c = a[k];
    a[k] = _.isArray(c)
      ? _.isArray(v)
        ? _.union(v, c)
        : v ? c.concat(v) : c
      : _.isObject(v) && _.isObject(c)
        ? extend(c, v)
        : v || c;
  }
  return a;
};
out$.embody = embody = function(obj){
  var deps, i, a;
  deps = {};
  i = arguments.length;
  while (i-- > 1) {
    if (_.isObject(a = arguments[i])) {
      deps = extend(deps, a);
    }
  }
  console.log("(extend.before) bp.renderers:", deps.fsm ? deps.fsm.renderers : "nope!");
  console.log("(extend.before) login.render:", deps.fsm && deps.fsm.states && deps.fsm.states.login ? deps.fsm.states.login.render : "nope!");
  deps = merge(obj, deps);
  console.log("(extend.after) bp.renderers:", deps.fsm ? deps.fsm.renderers : "nope!");
  console.log("(extend.after) login.render:", deps.fsm && deps.fsm.states && deps.fsm.states.login ? deps.fsm.states.login.render : "nope!");
  return deps;
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}